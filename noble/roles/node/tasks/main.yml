---

# Habilitar repositório universe e atualizar cache apt
# Nota: No Noble (24.04), universe já vem habilitado em /etc/apt/sources.list.d/ubuntu.sources
- name: Verificar se universe já está habilitado em ubuntu.sources
  shell: grep -q "^Components:.*universe" /etc/apt/sources.list.d/ubuntu.sources
  register: universe_check
  changed_when: false
  failed_when: false
  when: enable_universe

- name: Habilitar repositório universe (apenas se não estiver em ubuntu.sources)
  apt_repository:
    repo: "deb http://archive.ubuntu.com/ubuntu/ noble universe"
    state: present
    update_cache: yes
    filename: archive_ubuntu_com_ubuntu
  when:
    - enable_universe
    - universe_check.rc != 0

- name: Atualizar cache do APT
  apt:
    update_cache: yes
    cache_valid_time: 3600

# Instalar pré-requisitos para NodeSource
- name: Instalar pré-requisitos NodeSource
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present

# Criar diretório keyrings
- name: Criar diretório keyrings
  file:
    path: /usr/share/keyrings
    state: directory
    mode: '0755'

# Baixar e importar chave GPG do NodeSource
- name: Baixar chave GPG do NodeSource
  shell: |
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /usr/share/keyrings/nodesource.gpg
    chmod 644 /usr/share/keyrings/nodesource.gpg
    gpg --import /usr/share/keyrings/nodesource.gpg 2>/dev/null || true
  args:
    creates: /usr/share/keyrings/nodesource.gpg

# Adicionar repositório NodeSource
- name: Remover repositório NodeSource antigo (se existir)
  file:
    path: /etc/apt/sources.list.d/nodesource.list
    state: absent
  when: ansible_distribution_version is version('24.04', '==')

- name: Adicionar repositório NodeSource
  apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/nodesource.gpg] https://deb.nodesource.com/node_{{ node_version }} nodistro main"
    state: present
    update_cache: yes
    filename: nodesource

# Instalar Node.js e ferramentas de build
- name: Instalar Node.js e ferramentas de build
  apt:
    name:
      - nodejs
      - build-essential
      - python3
      - make
      - g++
      - pkg-config
    state: present
    update_cache: yes

# Habilitar Corepack globalmente
- name: Habilitar Corepack
  command: corepack enable
  changed_when: false

# Preparar pnpm e yarn como usuário alvo
- name: Preparar pnpm via Corepack
  command: corepack prepare pnpm@latest --activate
  become_user: "{{ main_user }}"
  when: prepare_pnpm
  changed_when: false

- name: Preparar yarn via Corepack
  command: corepack prepare yarn@stable --activate
  become_user: "{{ main_user }}"
  when: prepare_yarn
  changed_when: false

# Criar diretórios para npm global
- name: Criar diretório ~/.npm-global/bin
  file:
    path: "{{ npm_prefix }}/bin"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    mode: '0755'
    recurse: yes

- name: Criar diretório ~/.npm-global/lib/node_modules
  file:
    path: "{{ npm_prefix }}/lib/node_modules"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    mode: '0755'
    recurse: yes

# Configurar npm prefix global
- name: Configurar npm prefix para ~/.npm-global
  command: npm config set prefix "{{ npm_prefix }}"
  become_user: "{{ main_user }}"
  changed_when: false

# Adicionar ~/.npm-global/bin ao PATH no .bashrc
- name: Adicionar ~/.npm-global/bin ao PATH no .bashrc
  lineinfile:
    path: "{{ main_home }}/.bashrc"
    line: 'export PATH="$HOME/.npm-global/bin:$PATH"'
    regexp: '^export PATH=.*\.npm-global/bin'
    state: present
    create: yes
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    mode: '0644'

# Corrigir permissões dos diretórios npm
- name: Corrigir permissões do diretório ~/.npm
  file:
    path: "{{ main_home }}/.npm"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    recurse: yes
  ignore_errors: true

- name: Corrigir permissões do diretório ~/.npm-global
  file:
    path: "{{ npm_prefix }}"
    state: directory
    owner: "{{ main_user }}"
    group: "{{ main_user }}"
    recurse: yes

# Atualizar npm para versão desejada
- name: Atualizar npm para versão {{ desired_npm_version }}
  command: npm i -g npm@{{ desired_npm_version }}
  become_user: "{{ main_user }}"
  when: update_npm
  register: npm_update_result
  changed_when: "'added' in npm_update_result.stdout or 'updated' in npm_update_result.stdout"

# Verificações finais
- name: Verificar versão do Node.js
  command: node -v
  register: node_version_check
  changed_when: false

- name: Verificar versão do npm
  command: npm -v
  register: npm_version_check
  changed_when: false

- name: Executar npm doctor
  command: npm doctor
  become_user: "{{ main_user }}"
  register: npm_doctor_check
  changed_when: false
  ignore_errors: true

# Exibir resumo
- name: Exibir versão do Node.js instalado
  debug:
    msg: "Node.js versão: {{ node_version_check.stdout }}"

- name: Exibir versão do npm instalado
  debug:
    msg: "npm versão: {{ npm_version_check.stdout }}"

- name: Exibir resultado do npm doctor
  debug:
    msg: "npm doctor result:\n{{ npm_doctor_check.stdout }}"